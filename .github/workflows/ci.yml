name: CI

# Continuous Integration workflow for rcbench
on:
  pull_request:
    branches: [ dev ]  # Run on PRs to main
  workflow_dispatch:  # Allow manual triggers

# Set permissions to minimum required
permissions:
  contents: read
  actions: read
  checks: write

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    # Allow experimental builds to fail without failing the workflow
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Fix Windows encoding (Windows only)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Create a sitecustomize.py file to force UTF-8 encoding
          $site_packages = python -c "import site; print(site.getsitepackages()[0])"
          Set-Content -Path "$site_packages/sitecustomize.py" -Value "import sys; sys.stdout.reconfigure(encoding='utf-8'); sys.stderr.reconfigure(encoding='utf-8'); sys.stdin.reconfigure(encoding='utf-8')"
          # Set environment variables using GitHub Actions syntax
          echo "PYTHONIOENCODING=utf-8" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PYTHONUTF8=1" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PYTHONLEGACYWINDOWSFSENCODING=0" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[test]
          # Install test dependencies if available
          pip install pytest pytest-cov

      - name: Install package
        run: |
          python -m pip install -e .

      - name: Test with pytest
        run: |
          # Currently skipping tests until we have a proper test suite
          python -c "import sys; import os; os.environ['PYTHONIOENCODING']='utf-8'; os.environ['PYTHONUTF8']='1' if sys.platform.startswith('win') else '0'; import rcbench; print(f'Successfully imported rcbench {rcbench.__version__}')"
          # pytest --cov=rcbench

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel

      - name: Handle Windows encoding issues
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Check and convert README and other files to ensure UTF-8 encoding
          # This helps prevent charmap codec issues on Windows
          $content = Get-Content -Path 'README.md' -Raw -Encoding UTF8
          Set-Content -Path 'README.md' -Value $content -Encoding UTF8

      - name: Build wheels
        run: |
          python -m build --wheel
        env:
          # Fix encoding issues on Windows
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./dist/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build sdist
        run: python -m build --sdist
        env:
          # Fix encoding issues
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz 